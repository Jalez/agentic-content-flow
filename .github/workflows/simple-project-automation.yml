name: Simple Project Automation

on:
  issues:
    types: [labeled, unlabeled]

jobs:
  update_issue_status:
    runs-on: ubuntu-latest
    steps:
      - name: Check labels and move issue
        env:
          GH_TOKEN: ${{ secrets.ADD_TO_PROJECT_PAT }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO: ${{ github.repository }}
        run: |
          # Function to update project status using GraphQL
          update_project_status() {
            local status="$1"
            echo "Setting issue $ISSUE_NUMBER status to $status"
            
            # First, get the project ID and item ID
            project_data=$(gh api graphql -f query='
              query {
                user(login: "jalez") {
                  projectV2(number: 1) {
                    id
                    title
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            number
                            repository {
                              name
                              owner {
                                login
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            ' --jq '.data.user.projectV2')
            
            PROJECT_ID=$(echo "$project_data" | jq -r '.id')
            echo "Project ID: $PROJECT_ID"
            
            # Find the item ID for the current issue
            ITEM_ID=$(echo "$project_data" | jq -r --arg repo "$REPO" --arg issue "$ISSUE_NUMBER" '.items.nodes[] | select(.content.number == ($issue | tonumber) and .content.repository.owner.login + "/" + .content.repository.name == $repo) | .id')
            echo "Item ID: $ITEM_ID"
            
            # Find status field ID and option ID for the desired status
            STATUS_FIELD_ID=$(echo "$project_data" | jq -r '.fields.nodes[] | select(.name == "Status") | .id')
            echo "Status Field ID: $STATUS_FIELD_ID"
            
            STATUS_OPTION_ID=$(echo "$project_data" | jq -r --arg status "$status" '.fields.nodes[] | select(.name == "Status") | .options[] | select(.name == $status) | .id')
            echo "Status Option ID: $STATUS_OPTION_ID"
            
            # Update the status
            if [[ -n "$PROJECT_ID" && -n "$ITEM_ID" && -n "$STATUS_FIELD_ID" && -n "$STATUS_OPTION_ID" ]]; then
              gh api graphql -f query='
                mutation (
                  $project_id: ID!
                  $item_id: ID!
                  $field_id: ID!
                  $option_id: String!
                ) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $project_id
                    itemId: $item_id
                    fieldId: $field_id
                    value: { singleSelectOptionId: $option_id }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }' \
                -f project_id="$PROJECT_ID" \
                -f item_id="$ITEM_ID" \
                -f field_id="$STATUS_FIELD_ID" \
                -f option_id="$STATUS_OPTION_ID"
              
              echo "Successfully updated project status to $status"
            else
              echo "Failed to get required IDs for project update"
              exit 1
            fi
          }
          
          # Set the status based on labels
          if [[ "${{ contains(github.event.issue.labels.*.name, 'in-progress') }}" == "true" ]]; then
            update_project_status "In Progress"
          elif [[ "${{ contains(github.event.issue.labels.*.name, 'done') }}" == "true" ]]; then
            update_project_status "Done"
          else
            update_project_status "Todo"
          fi